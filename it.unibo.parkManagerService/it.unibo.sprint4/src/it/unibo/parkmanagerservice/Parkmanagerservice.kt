/* Generated by AN DISI Unibo */ 
package it.unibo.parkmanagerservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkmanagerservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var fanIsStarted = 0
				
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("parkingManager | start")
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						println("parkingManager | waiting")
					}
					 transition(edgeName="t02",targetState="handleTemp",cond=whenEvent("temperature"))
				}	 
				state("handleTemp") { //this:State
					action { //it:State
						println("parkingManager | handleTemp")
						if( checkMsgContent( Term.createTerm("temperature(T)"), Term.createTerm("temperature(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var temp= payloadArg(0).toInt() 
								if(  temp > 35  && fanIsStarted == 0  
								 ){println("parkingManager [handleTemp]: send start command to fan ")
								forward("fanstart", "fanstart(on)" ,"fan" ) 
								fanIsStarted = 1 
								}
								if(  temp <= 35  && fanIsStarted == 1 
								 ){println("parkingManager [handleTemp]: send stop command to fan ")
								forward("fanstop", "fanstop(off)" ,"fan" ) 
								fanIsStarted = 0 
								}
						}
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
			}
		}
}
