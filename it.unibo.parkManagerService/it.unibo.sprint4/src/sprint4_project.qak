 System  /*  -trace */ parkingarea           
//mqttBroker "localhost" : 1883 eventTopic "unibo/basicrobot"   		
Event outsonar : outsonar (O)
Dispatch alarm : alarm(W)

Dispatch weight : weight (W)

  
   
Dispatch fanstart: fanstart(V)   
Dispatch fanstop : fanstop(V)

Dispatch temperature :  temperature (T)  

  


Dispatch end : end(e)

Dispatch takecar : takecar(P)   
 
 
 
Dispatch stateChange:  stateChange (V)
Dispatch warning : warning (V)

Dispatch temp : temp (V)
Dispatch trolleystop :  trolleystop(V)
Dispatch trolleyresume :  trolleyresume(V)


Dispatch trolleycmd : trolleycmd(MOVETO)
Dispatch cmd       	: cmd(M)     
Dispatch trolleyEnd : end(V)   


Dispatch basicEnd       	: end(ARG)   
    
Dispatch moveok	: move( MOVESHORT )
Request step	: step( TIME )	
Reply   stepdone	: stepdone(V)  
Reply   stepfail	: stepfail(DURATION, CAUSE) 
  
Dispatch obstacle  : obstacle( ARG ) 		//generated by distancefilter
Event  endall	   : endall( ARG )    
Event   info       : info( ARG ) 	    	//for external components, not coap-observed
Event  sonar       : sonar(DISTANCE,NAME)	//emitted by distancefilter
 
Context ctxparkingarea ip [host="localhost" port=8021]  


CodedQActor datacleaner    context ctxparkingarea className "rx.dataCleaner"  //NOT used with the virtualrobot
CodedQActor distancefilter context ctxparkingarea className "rx.distanceFilter"
  



QActor trolley context ctxparkingarea{
[#  val mapname     = "parkingMap0"  		  
  var Myself      = myself     
  var CurrentPlannedMove = ""   
  var MOVE = ""
  var terminate =  0
  var home = 0
  var counter = 0
  var trolleyCmd = ""
  var listCommand = arrayListOf<String>()
  
#]   	
	State s0 initial{
		println ("trolley | start ")
		[#TrolleyPlannerSupport.initPlanner("$mapname")#]
 
	}
	Goto idle
	           
	State idle{
		updateResource [# "trolley(idle)" #]
		
		println("trolley [idle]  | waiting......... ") 
	  
	} 	
	
	Transition t1  	 whenMsg trolleycmd  -> working
					 whenMsg trolleystop -> stopped
													
	State working{
		updateResource [# "trolley(working)" #]
		
		println("trolley | working")
		[#home = 0#] 
		onMsg( trolleycmd : trolleycmd(V) ){
			[#	trolleyCmd = "${payloadArg(0)}" 	 
				TrolleyPlannerSupport.setGoal(trolleyCmd)
				if(trolleyCmd == "moveToHome"){
					home =  1
				}
				if(trolleyCmd == "end"){
					terminate =  1
				}
			#]
		}
	} 
	
	Goto execPlannedMoves 
		
  	State execPlannedMoves{
  		updateResource [# "trolley(working)" #]
  		
  		delay 400
 		[#CurrentPlannedMove = TrolleyPlannerSupport.getNextMove() #]
	}
	Goto doMove if [# CurrentPlannedMove.length>0  #] else finishPlannedMoves 
	
	State doMove{ 		
		forward basicrobot -m cmd : cmd($CurrentPlannedMove)
  	} 
  
	Transition t1   whenTime 100 -> execPlannedMoves
 					whenMsg  trolleycmd  and [#home == 1 && terminate == 0#]-> working
 	 				whenMsg  trolleystop -> stopped
 	State stopped{
	  	updateResource [# "trolley(stopped)" #] 		
 		println("trolley | stopped")
 		forward basicrobot -m cmd : cmd(h)
 	}
 	Transition t1 whenMsg trolleyresume -> execPlannedMoves 
 				  
 	State finishPlannedMoves{  
 		println("trolley | finishPlannedMoves")
 	
 		[#if(home == 1 || terminate == 1){
 		
 			listCommand =  TrolleyPlannerSupport.atHome()
			for (command in listCommand) {   
   				forward("cmd", "cmd(${command})" ,"basicrobot" )
			}
		}else{ 
			listCommand =  TrolleyPlannerSupport.loadUnloadCar()
			for (command in listCommand) {
   				forward("cmd", "cmd(${command})" ,"basicrobot" )
			}
				delay(1000)//we want to simulate load/unload the car
		}#]    
		updateResource[#TrolleyPlannerSupport.getPosition()#]
		
	
 	}	
	Goto endWork if [# terminate == 1  #] else idle
	  
	State endWork{
		println("trolley |  endWork")
		forward basicrobot -m end : end(V)         
	}					
}

	
 
QActor outmanager context ctxparkingarea{
	[#	var start =  0L
		var difference = 0L
		var send= 1
	
	#]
	State s0 initial{
		
		println ("outmanager | start")
		
	} Transition t0 whenEvent 	outsonar -> start
	
	State start{
		
		[# start = System.currentTimeMillis()#]
		println("outmanager [start] | start Timer ) ")
		
		
	}Goto work
		
	State work{
		
		[#difference = System.currentTimeMillis() - start#]
		println("outmanager [work] |  difference = $difference")
		if[#difference >= 1000L#]{
			println("outmanager [work]  | alarm event, time passed = $difference")
			if[#send==1#]{
			updateResource [# "{\"alarm\":\"alarm(occ)\"}" #] 
			[#send=0#]
			}
			
		}

	} Transition t0 whenTime 300 ->work
					whenMsg takecar-> free
				
	State free {
		[#send=1#]
		updateResource [# "{\"alarm\":\"alarm(free)\"}" #] 
		
		println("outmanager [free] | OUTDOORAREA FREE")
	}
}

QActor fanmanager context ctxparkingarea{    
	
	State s0 initial {  
		println("fan | start")
	
	}Goto stopped   
	
	State stopped {
		println ("fan | stopped")
		updateResource [#"fan(stop)"#] 
		
	}Transition t0 whenMsg fanstart->working
				  
	State working {
		println("fan | working")
		updateResource [#"fan(work)"#]
	
	}Transition t0 whenMsg fanstop->stopped	
}

QActor parkingmanager context ctxparkingarea {
	[#var fanIsStarted = 0
	  var robotIsActive = 1 
	  var stateTrolley = "trolley(idle)"
	  var stateFan= "fan(stop)"
	  var start =  0L
	  var differenza = 0L
	  var temp1 = 0#]
	State s0 initial {
		println("parkingmanager | start") 
	} 
	Goto waiting
	State waiting{  
		delay 500
		
		println("parkingmanager | waiting") 
	 	
	[# stateTrolley = utility.HandleData().getState("trolley")#]
	println("$stateTrolley")
		updateResource [#"{\"statetrolley\":\"$stateTrolley\", \"statefan\":\"$stateFan\", \"temp\":\"temp($temp1)\"}"#] 

}	Transition t0 	whenMsg temperature-> handleTemperature	
					
					
	State handleTemperature{
		onMsg(temperature : temperature(T)){
			delay 500
			
			[#  temp1= payloadArg(0).toInt()
				stateTrolley = utility.HandleData().getState("trolley")
				stateFan = utility.HandleData().getState("fanmanager")
			#] 
			delay 400
			
		updateResource [#"{\"statetrolley\":\"$stateTrolley\", \"statefan\":\"$stateFan\", \"temp\":\"temp($temp1)\"}"#] 

			
				println("parkingmanager [handleTemperature] | state trolley = $stateTrolley state fan = $stateFan ")
				println("parkingmanager [handleTemperature] | temperature = $temp1 ") 
					
		}
		
	}Transition t0  whenTime  4000 -> autoFan
					whenMsg temperature-> handleTemperature
					whenMsg stateChange -> handleTrolley
	
	State handleTrolley{
		
	
		println("parkingmanager | handleTemperature troll = $temp1 ")
		printCurrentMessage
		onMsg(stateChange :stateChange(V) ){
			[#var stateT= payloadArg(0)#]
			if[# temp1 > 35 && !stateTrolley.equals("trolley(stopped)") && stateT.equals("over")  && stateFan.equals("fan(stop)")#]{
				println("parkingmanager | trolley stopped update fan")
				forward trolley -m trolleystop: trolleystop(V)
			 	forward fanmanager -m fanstart : fanstart(F)
			 	
			 	
				
			}
			if[# temp1 < 35  && stateTrolley.equals("trolley(stopped)") && stateT.equals("under")  && stateFan.equals("fan(work)")#]{
				println("parkingmanager | trolley working update fan ")
				forward trolley -m trolleyresume : trolleyresume(V)
				forward fanmanager -m fanstop : fanstop(F)
				
				
				
				
			}      
			
			[# stateTrolley = utility.HandleData().getState("trolley")
				stateFan = utility.HandleData().getState("fanmanager")
			#] 
			delay 400
			updateResource [#"{\"statetrolley\":\"$stateTrolley\", \"statefan\":\"$stateFan\", \"temp\":\"temp($temp1)\"}"#] 

			
			
		}
			
	}Transition t0 	whenTime  4000 -> autoFan
					whenMsg temperature-> handleTemperature
	
	State autoFan{
		
		if[# temp1 > 35  && stateFan.equals("fan(stop)")#] {	
			
			println("parkingmanager [autoFan] | fan working ")
				forward fanmanager -m fanstart : fanstart(F)
						

			 
		}
		if[# temp1 < 35  && stateFan.equals("fan(work)")  #] {
			
			println("parkingmanager [autoFan] | fan stopped ")
			forward fanmanager -m fanstop : fanstop(F)
		}  
		[# stateTrolley = utility.HandleData().getState("trolley")
				stateFan = utility.HandleData().getState("fanmanager")
		#] 
		delay 400
		updateResource [#"{\"statetrolley\":\"$stateTrolley\", \"statefan\":\"$stateFan\", \"temp\":\"temp($temp1)\"}"#] 

	 
	}Transition t0  whenMsg temperature-> handleTemperature
					whenMsg stateChange -> handleTrolley

}



QActor basicrobot context ctxparkingarea{
[#  
  var StepTime      = 0L 
  var StartTime     = 0L     
  var Duration      = 0L  
  var RobotType     = "" 
  var CurrentMove   = "moveUnknown"
#]     
	State s0 initial {     
		println("basicrobot | START")	 
 		//[# sysUtil.trace = true #]		//Equivalent to the -trace flag
 		 
 		[# sysUtil.waitUser("hello", 3000) #]
 		qrun unibo.robot.robotSupport.create(myself,"basicrobotConfig.json")	
 		[# RobotType = unibo.robot.robotSupport.robotKind #]
        if[# RobotType != "virtual" #]{
	 		println("basicrobot | type=$RobotType attempts to activate the sonar pipe")	
	 		[#  //For real robots
				//delay( 1500 ) //give to the realsonar the time to start
	 			var robotsonar = context!!.hasActor("realsonar")  
	 			if( robotsonar != null ){ 
	 				println("basicrobot | WORKING WITH SONARS") 
	 				//ACTIVATE THE DATA SOURCE realsonar
	 				forward("sonarstart", "sonarstart(1)" ,"realsonar" ) 				
	 				//SET THE PIPE  
	 				robotsonar.
	 				subscribeLocalActor("datacleaner").
	 				subscribeLocalActor("distancefilter").
	 				subscribeLocalActor("basicrobot")		//in order to perceive obstacle
	 			}else{
	 				println("basicrobot | WARNING: realsonar NOT FOUND")
	 			}
	 		#]  
	 		
 		} 
		else{ //virtual
			[#  var robotsonar = context!!.hasActor("robotsonar") 
	 			if( robotsonar != null ){ 
	 				println("basicrobot | WORKING WITH VIRTUAL SONAR") 
	 				//ACTIVATE THE DATA SOURCE realsonar
	 				forward("sonarstart", "sonarstart(1)" ,"robotsonar" ) 				
	 				//WE DO NOT SET THE PIPE, since we don't have sonar data  to clean
	 			
	 				//robotsonar.
	 				//subscribeLocalActor("datacleaner").
	 				//subscribeLocalActor("distancefilter").
	 				//subscribeLocalActor("basicrobot")		
	 			}else{
	 				println("basicrobot | WARNING: robotsonar NOT FOUND")
	 			}
 
 			#] 
 		}
 		
	//	updateResource [# "basicrobot(start)" #]
 
		discardMsg Off  //WE want receive any msg 
	} 
	
	Goto work
	 
	State work{  
		println("basicrobot  | waiting .................. ")  
		
	}
	Transition t1   whenMsg    	cmd		-> exec
					whenRequest step	-> doStep			
					whenMsg		obstacle	-> handleObstacle  //in virtualrobot caused by the move w/s
				  	whenMsg    	end	-> endwork			   
	State exec{
		printCurrentMessage
		onMsg( cmd : cmd(MOVE) ){ 
  			//activate the motors  
			[# CurrentMove =  "${payloadArg(0)}" #] 
			println("CurrentMove = $CurrentMove")
		 	if [# CurrentMove == "w" #] {
				//delay 1000
				run unibo.robot.robotSupport.move( "w" ) 
				delay 400
				run unibo.robot.robotSupport.move( "h" )
			}else{
				run unibo.robot.robotSupport.move( "${payloadArg(0)}" )
				
				
			}
			if [# CurrentMove != "h" #] { 
				updateResource [# "$CurrentMove" #]
			}
		}
	 }  
	 
	Goto work      
	        
	State handleObstacle{   
	    run unibo.robot.robotSupport.move( "h" )
		println("basicrobot | handleObstacle CurrentMove=$CurrentMove")	
		printCurrentMessage
			//msg(obstacle,dispatch,distancefilter,basicrobot,obstacle(5),18)
		if[# CurrentMove == "w" #]{
 			
			  // collision Json      : emitted by the virtualrobot 
			  // obstacle(virtual)   : emitted by the virtualrobotSupport2021 when endmove=false
			  // obstacle(5)         : emitted by the distanceFilter
			  // obstacle(w)         : emitted by the basicrobot
			 
			//updateResource [# "obstacle(w)" #]
			//delay 300
			
			//println("COMPENSATEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE")
			run unibo.robot.robotSupport.move( "s" ) 
			delay 100 //loose the control ...
			run unibo.robot.robotSupport.move( "h" ) 
		
			//delay 1000	//give time
 		 
		} 	
	}
	Goto work

	
   	State doStep{ 
 		printCurrentMessage  
		onMsg( step : step( T ) ){  
			[#	StepTime = payloadArg(0).toLong() 	#]  
			updateResource [# "step(${StepTime})" #]
  		}  
        memoCurrentTime StartTime  
        println("basicrobot | doStep StepTime =$StepTime ")        
        run unibo.robot.robotSupport.move( "w" )  //moves a real robot forever
        
	}  
	Transition t0 	whenTimeVar StepTime  -> stepDone //stepPerhapsDone	//caused by p
					whenMsg  obstacle     -> stepFail		
        //whenMsg     cmd       -> execcmd
  	 
	State stepDone{   
 		run unibo.robot.robotSupport.move( "h" )  //stop the real robot already done
		println("basicrobot | stepDone")
		updateResource [# "stepDone($StepTime)" #]
   		//emit info : info( stepdone($StepTime) )
   		replyTo step with stepdone : stepdone(ok)
		//println("basicrobot | stepDone reply done")
  	}
	Goto work  
 
	State stepFail{  		    
		setDuration Duration from StartTime
		run unibo.robot.robotSupport.move( "h" )  //stop the (real) robot
		[# var TunedDuration = Duration;  
			TunedDuration = Duration * 5 / 6
		#]
		println("basicrobot | stepFail duration=$Duration TunedDuration=$TunedDuration")
			run unibo.robot.robotSupport.move( "s" )
			delayVar TunedDuration 
			run unibo.robot.robotSupport.move( "h" ) 
 		updateResource [# "stepFail($Duration)" #] 
 		//emit info : info( stepFail($Duration) )
 		replyTo step with stepfail : stepfail($Duration, obst)
    }
	Goto work
	
	State endwork{ 
		println("basicrobot | endwork")
		onMsg( end : end( V ) ){ 
			println("basicrobot | endwork")
			updateResource [# "basicrobot(end)" #]	 		
		}
 		emit endall : endall(normal) 
 		terminate 1
	}
	       
 }
 
 	
