System parkingarea
 
Dispatch fanstart: fanstart(V)
Dispatch fanstop : fanstop(V) 

Event temperature : temperature (T) 
Context ctxparkingarea ip [host= "localhost" port=8021]

QActor fan context ctxparkingarea{    
	State s0 initial {  
		println("fan | start")
	}
	   
	Goto stopped    
	
	State stopped {
		println ("fan | stopped") 
		updateResource [#"fan(stop)"#] 
		
	}
	
	Transition t0 whenMsg fanstart->working
				  
	State working {
		println("fan | working")
		updateResource [#"fan(work)"#]
	}
	
	Transition t0 whenMsg fanstop->stopped
				
}
	
QActor thermometer context ctxparkingarea{
		State s0 initial {println("thermometer | starting ")
	}  
	
	Goto work
	State work{
    	println("thermometer | work")
	   	emit temperature : temperature (40)
		delay 1000
		emit temperature : temperature (30)
		delay 1000
		emit temperature : temperature (30)
	
	}    
}

QActor parkmanagerservice context ctxparkingarea {
	[#var fanIsStarted = 0
		
	#]
	State s0 initial {
		println("parkingManager | start")
	} 
	Goto waiting
	State waiting{
		println("parkingManager | waiting")
		
	}
	Transition t0 whenEvent temperature-> handleTemp
	State handleTemp
	{
		println("parkingManager | handleTemp")
		onMsg(temperature : temperature(T)){
				
			[# var temp= payloadArg(0).toInt()#]
			if[# temp > 35  && fanIsStarted == 0 #]{
				println("parkingManager [handleTemp]: send start command to fan ")
				forward fan -m fanstart: fanstart(on)
				[#fanIsStarted = 1#]
				
			}if[# temp <= 35  && fanIsStarted == 1#] {
				println("parkingManager [handleTemp]: send stop command to fan ")
				forward fan -m fanstop: fanstop(off)
				[#fanIsStarted = 0#]
			}
			}
	}
	Goto waiting
	
	}
