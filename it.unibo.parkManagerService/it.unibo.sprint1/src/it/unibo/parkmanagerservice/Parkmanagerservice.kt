/* Generated by AN DISI Unibo */ 
package it.unibo.parkmanagerservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkmanagerservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("parkmananagerservice | start")
					}
					 transition( edgeName="goto",targetState="waiting", cond=doswitch() )
				}	 
				state("waiting") { //this:State
					action { //it:State
						println("parkmananagerservice | waiting")
					}
					 transition(edgeName="t19",targetState="working",cond=whenRequest("req"))
				}	 
				state("working") { //this:State
					action { //it:State
						println("parkmananagerservice | working")
						updateResourceRep("accepted" 
						)
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("req(VAL)"), Term.createTerm("req(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var REQ =  payloadArg(0) 
								forward("trolleycmd", "trolleycmd($REQ)" ,"trolley" ) 
						}
						answer("req", "resp", "resp(ok)"   )  
					}
					 transition(edgeName="t110",targetState="working",cond=whenRequest("req"))
				}	 
			}
		}
}
