 /* 
 * ================================================================================
 * basicrobot.qak
 * VERSION July 8, 2021
 * The basicrobot emits the event  obstacle : obstacle(ID)
 * 
 * External MQTT sites:
 * 	"mqtt.eclipse.org:  mosquitto.org mqtt.fluux.io  broker.hivemq.com
 * ================================================================================
 */  
   
System  /*  -trace */ parkingarea           
//mqttBroker "localhost" : 1883 eventTopic "unibo/basicrobot"   		

Dispatch trolleycmd : trolleycmd(MOVE)
Dispatch cmd       	: cmd(M)      
Request  req :  req (VAL)
Reply resp : resp(V)

Dispatch end       	: end(ARG)    
Dispatch moveok     : move( MOVESHORT )
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(DURATION, CAUSE)
  
Dispatch obstacle  : obstacle( ARG ) 		//generated by distancefilter
Event  endall	   : endall( ARG )    
Event   info       : info( ARG ) 	    	//for external components, not coap-observed
Event  sonar       : sonar(DISTANCE,NAME)	//emitted by distancefilter
 
Context ctxparkingarea ip [host="localhost" port=8021]  

CodedQActor datacleaner    context ctxparkingarea className "rx.dataCleaner"  //NOT used with the virtualrobot
CodedQActor distancefilter context ctxparkingarea className "rx.distanceFilter"
  
QActor basicrobot context ctxparkingarea{ 
[#
  var StepTime      = 0L 
  var StartTime     = 0L     
  var Duration      = 0L   
  var RobotType     = "" 
  var CurrentMove   = "moveUnknown"
#]     
	State s0 initial {     
		println("basicrobot | START")	 
 		//[# sysUtil.trace = true #]		//Equivalent to the -trace flag
 		 
 		[# sysUtil.waitUser("hello", 3000) #]
 		qrun unibo.robot.robotSupport.create(myself,"basicrobotConfig.json")	
 		[# RobotType = unibo.robot.robotSupport.robotKind #]
        if[# RobotType != "virtual" #]{
	 		println("basicrobot | type=$RobotType attempts to activate the sonar pipe")	
	 		[#  //For real robots
				//delay( 1500 ) //give to the realsonar the time to start
	 			var robotsonar = context!!.hasActor("realsonar")  
	 			if( robotsonar != null ){ 
	 				println("basicrobot | WORKING WITH SONARS") 
	 				//ACTIVATE THE DATA SOURCE realsonar
	 				forward("sonarstart", "sonarstart(1)" ,"realsonar" ) 				
	 				//SET THE PIPE  
	 				robotsonar.
	 				subscribeLocalActor("datacleaner").
	 				subscribeLocalActor("distancefilter").
	 				subscribeLocalActor("basicrobot")		//in order to perceive obstacle
	 			}else{
	 				println("basicrobot | WARNING: realsonar NOT FOUND")
	 			}
	 		#]  
 		} 
		else{ //virtual
			[#  var robotsonar = context!!.hasActor("robotsonar") 
	 			if( robotsonar != null ){ 
	 				println("basicrobot | WORKING WITH VIRTUAL SONAR") 
	 				//ACTIVATE THE DATA SOURCE realsonar
	 				forward("sonarstart", "sonarstart(1)" ,"robotsonar" ) 				
	 				//WE DO NOT SET THE PIPE, since we don't have sonar data  to clean
	 				/* 
	 				robotsonar.
	 				subscribeLocalActor("datacleaner").
	 				subscribeLocalActor("distancefilter").
	 				subscribeLocalActor("basicrobot")		*/
	 			}else{
	 				println("basicrobot | WARNING: robotsonar NOT FOUND")
	 			}
 
 			#] 
 		}
 		
	//	updateResource [# "basicrobot(start)" #]
 
		discardMsg Off  //WE want receive any msg 
	} 
	
	Goto work
	 
	State work{  
		println("basicrobot  | waiting .................. ")  
		
	}
	Transition t1   whenMsg    	cmd		-> exec
					whenRequest step	-> doStep			
					whenMsg		obstacle	-> handleObstacle  //in virtualrobot caused by the move w/s
				  	whenMsg    	end	-> endwork			   
	State exec{
		printCurrentMessage
		onMsg( cmd : cmd(MOVE) ){ 
  			//activate the motors  
			[# CurrentMove =  "${payloadArg(0)}" #] 
			println("CurrentMove =  $CurrentMove")
		 	if [# CurrentMove == "w" #] {
				//delay 1000
				run unibo.robot.robotSupport.move( "w" ) 
				delay 400
				run unibo.robot.robotSupport.move( "h" )
			}else{
				run unibo.robot.robotSupport.move( "${payloadArg(0)}" )
				
				
			}
			if [# CurrentMove != "h" #] { 
				updateResource [# "$CurrentMove" #]
			}
		}
	 }  
	 
	Goto work      
	        
	State handleObstacle{   
	    run unibo.robot.robotSupport.move( "h" )
		println("basicrobot | handleObstacle CurrentMove=$CurrentMove")	
		printCurrentMessage
			//msg(obstacle,dispatch,distancefilter,basicrobot,obstacle(5),18)
		if[# CurrentMove == "w" #]{
 			/*
			 * collision Json      : emitted by the virtualrobot 
			 * obstacle(virtual)   : emitted by the virtualrobotSupport2021 when endmove=false
			 * obstacle(5)         : emitted by the distanceFilter
			 * obstacle(w)         : emitted by the basicrobot
			 */ 
			//updateResource [# "obstacle(w)" #]
			//delay 300
			
			//println("COMPENSATEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE")
			run unibo.robot.robotSupport.move( "s" ) 
			delay 100 //loose the control ...
			run unibo.robot.robotSupport.move( "h" ) 
		
			//delay 1000	//give time
 		 
		} 	
	}
	Goto work

	
   	State doStep{ 
 		printCurrentMessage  
		onMsg( step : step( T ) ){  
			[#	StepTime = payloadArg(0).toLong() 	#]  
			updateResource [# "step(${StepTime})" #]
  		}  
        memoCurrentTime StartTime  
        println("basicrobot | doStep StepTime =$StepTime ")        
        run unibo.robot.robotSupport.move( "w" )  //moves a real robot forever
        
	}  
	Transition t0 	whenTimeVar StepTime  -> stepDone //stepPerhapsDone	//caused by p
					whenMsg  obstacle     -> stepFail		
        //whenMsg     cmd       -> execcmd
  	 
	State stepDone{   
 		run unibo.robot.robotSupport.move( "h" )  //stop the real robot already done
		println("basicrobot | stepDone")
		updateResource [# "stepDone($StepTime)" #]
   		//emit info : info( stepdone($StepTime) )
   		replyTo step with stepdone : stepdone(ok)
		//println("basicrobot | stepDone reply done")
  	}
	Goto work  
 
	State stepFail{  		    
		setDuration Duration from StartTime
		run unibo.robot.robotSupport.move( "h" )  //stop the (real) robot
		[# var TunedDuration = Duration;  
			TunedDuration = Duration * 5 / 6
		#]
		println("basicrobot | stepFail duration=$Duration TunedDuration=$TunedDuration")
			run unibo.robot.robotSupport.move( "s" )
			delayVar TunedDuration 
			run unibo.robot.robotSupport.move( "h" ) 
 		updateResource [# "stepFail($Duration)" #] 
 		//emit info : info( stepFail($Duration) )
 		replyTo step with stepfail : stepfail($Duration, obst)
    }
	Goto work
	
	State endwork{ 
		println("basicrobot | endwork")
		onMsg( end : end( V ) ){ 
			println("basicrobot | endwork")
			updateResource [# "basicrobot(end)" #]	 		
		}
 		emit endall : endall(normal) 
 		terminate 1
	}      
 }  
 	
QActor trolley context ctxparkingarea{
[#  val mapname     = "parkingMap0"  		  
  var Myself      = myself    
  var CurrentPlannedMove = ""   
  var MOVE = ""
  var terminate =  0
  var home = 0
  var counter = 0
  var trolleyCmd = ""
  var listCommand = arrayListOf<String>()
  
#]   	
	State s0 initial{
		println ("trolley | start ")
		[#TrolleyPlannerSupport.initPlanner("$mapname")#]
 
	}
	Goto idle
	           
	State idle{
		println("trolley [idle]  | waiting......... ") 
	  
	} 	
	
	Transition t1  	 whenMsg     trolleycmd  -> working
													
	State working{
		
		println("trolley | working")
		[#home = 0#] 
		onMsg( trolleycmd : trolleycmd(V) ){
			[#	trolleyCmd = "${payloadArg(0)}" 	 
				TrolleyPlannerSupport.setGoal(trolleyCmd)
				if(trolleyCmd == "moveToHome"){
					home =  1
				}
				if(trolleyCmd == "end"){
					terminate =  1
				}
			#]
		}
	
	} 
	
	Goto execPlannedMoves 
		
  	State execPlannedMoves{
  		delay 400
 		[#CurrentPlannedMove = TrolleyPlannerSupport.getNextMove() #]
	}
	Goto doMove if [# CurrentPlannedMove.length>0  #] else finishPlannedMoves 
	
	State doMove{ 		
		forward basicrobot -m cmd : cmd($CurrentPlannedMove)
		
		
  	} 
  
	Transition t1   whenTime 100 -> execPlannedMoves
 					whenMsg  trolleycmd  and [#home == 1 && terminate == 0#]-> working
 	
 	State finishPlannedMoves{  
 		println("trolley | finishPlannedMoves")
 	
 		[#if(home == 1 || terminate == 1){
 		
 			listCommand =  TrolleyPlannerSupport.atHome()
			for (command in listCommand) {   
   				forward("cmd", "cmd(${command})" ,"basicrobot" )
			}
		}else{ 
			listCommand =  TrolleyPlannerSupport.loadUnloadCar()
			for (command in listCommand) {
   				forward("cmd", "cmd(${command})" ,"basicrobot" )
			}
				delay(1000)//we want to simulate load/unload the car
		}#]    
		updateResource[#TrolleyPlannerSupport.getPosition()#]
		
	
 	}	
	Goto endWork if [# terminate == 1  #] else idle
	  
	State endWork{
		println("trolley |  endWork")
		forward basicrobot -m end : end(V)         
	}					
}


QActor parkmanagerservice context ctxparkingarea{
	   
	State s0 initial{  
		println("parkmananagerservice | start")
	
	}
	Goto waiting      
	  
	State waiting{
		println("parkmananagerservice | waiting")
	}
	Transition t1   whenRequest  req -> working
	
	State working{
		println("parkmananagerservice | working")
		updateResource[#"accepted"#]
		printCurrentMessage
		
		onMsg( req : req(V)){  
			[# var REQ =  payloadArg(0)#] 
			
			forward trolley -m trolleycmd : trolleycmd($REQ)
		}
		replyTo req with resp : resp(ok)	 
		}
		
		Transition t1   whenRequest  req -> working
		        
}



