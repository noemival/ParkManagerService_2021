/* Generated by AN DISI Unibo */ 
package it.unibo.parkmanagerservice

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkmanagerservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 	var SLOTNUM = 0
				var CARSLOTNUM = 0 
				var TOKENID = " "
				var INFREE = 1   
				var OUTFREE = 1
				var stateTrolley =""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("parkmanagerservice | start")
					}
					 transition( edgeName="goto",targetState="working", cond=doswitch() )
				}	 
				state("working") { //this:State
					action { //it:State
						println("parkmanagerservice | working")
						println("parkmanagerservice [working] | OUTDOOR = $OUTFREE")
						stateTrolley = utility.HandleData().getState("trolley") 
					}
					 transition(edgeName="t00",targetState="acceptIn",cond=whenRequest("notifyIn"))
					transition(edgeName="t01",targetState="acceptOut",cond=whenRequest("pickup"))
					transition(edgeName="t02",targetState="handleCarenter",cond=whenRequest("carenter"))
					transition(edgeName="t03",targetState="handlemsgIn",cond=whenDispatch("weight"))
					transition(edgeName="t04",targetState="handlemsgOut",cond=whenDispatch("outfree"))
					transition(edgeName="t05",targetState="theend",cond=whenDispatch("end"))
				}	 
				state("handlemsgIn") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("weight(W)"), Term.createTerm("weight(W)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var W = payloadArg(0).toInt()  
								if( W>0 
								 ){INFREE = 0  
								println("parkManagerService [handlemsgIn] | INDOOR occupied")
								}
								else
								 {INFREE = 1 
								 println("parkManagerService [handlemsgIn] | INDOOR free")
								 }
						}
					}
					 transition( edgeName="goto",targetState="working", cond=doswitch() )
				}	 
				state("handlemsgOut") { //this:State
					action { //it:State
						println("parkManagerService [handlemsgOut] ")
						if( checkMsgContent( Term.createTerm("outfree(F)"), Term.createTerm("outfree(F)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var O = payloadArg(0)  
								println("adadadddaad"+O) 
								if( O.equals("occ") 
								 ){OUTFREE = 0  
								println("parkManagerService [handlemsgOut] | OUTDOOR occupied")
								}
								if( O.equals("free") 
								 ){OUTFREE = 1 
								println("parkManagerService [handlemsgOut] | OUTDOOR free")
								}
						}
					}
					 transition( edgeName="goto",targetState="working", cond=doswitch() )
				}	 
				state("acceptIn") { //this:State
					action { //it:State
						updateResourceRep( "parkmanagerservice(acceptIn)"  
						)
						println("parkManagerService | acceptIn")
						if( checkMsgContent( Term.createTerm("notifyIn(N)"), Term.createTerm("notifyIn(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 SLOTNUM = Slotnum.getSlotnum()  
								if( SLOTNUM >0 
								 ){if(  INFREE ==1 &&  !stateTrolley.equals("trolley(stopped)") 
								 ){answer("notifyIn", "informIn", "informIn($SLOTNUM)"   )  
								}
								else
								 {answer("notifyIn", "informIn", "informIn(9)"   )  
								 println("parkManagerService [acceptIn] | indoor-area occupied, the request could not be processed")
								 }
								}
								else
								 {answer("notifyIn", "informIn", "informIn($SLOTNUM)"   )  
								 }
						}
					}
					 transition(edgeName="t06",targetState="handleCarenter",cond=whenRequest("carenter"))
					transition(edgeName="t07",targetState="acceptOut",cond=whenRequest("pickup"))
					transition(edgeName="t08",targetState="acceptIn",cond=whenRequest("notifyIn"))
					transition(edgeName="t09",targetState="handlemsgIn",cond=whenDispatch("weight"))
					transition(edgeName="t010",targetState="handlemsgOut",cond=whenDispatch("outfree"))
					transition(edgeName="t011",targetState="theend",cond=whenDispatch("end"))
				}	 
				state("handleCarenter") { //this:State
					action { //it:State
						updateResourceRep( "parkmanagerservice(handleCarEnter)"  
						)
						println("parkManagerService | caraenter")
						if( checkMsgContent( Term.createTerm("carenter(C)"), Term.createTerm("carenter(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								   
									 			SLOTNUM= payloadArg(0).toInt()
								if(  SLOTNUM!= 0  
								 ){println("parkManagerService [carenter] | send to trolley moveToIn")
								 var SLOTFREE = Slotnum.slotfree(SLOTNUM) 
								println("parkManagerService [carenter] | $SLOTFREE")
								if( Slotnum.slotfree(SLOTNUM) 
								 ){Slotnum.uptadeSlotnum(SLOTNUM, false) 
								forward("trolleycmd", "trolleycmd(moveToIn)" ,"trolley" ) 
								delay(200) 
								 
													var MOVETOSLOT = "moveToSlot".plus(SLOTNUM)
								println("parkManagerService [carenter] | send to trolley $MOVETOSLOT")
								forward("trolleycmd", "trolleycmd($MOVETOSLOT)" ,"trolley" ) 
								 TOKENID=  Slotnum.generateTOKENID(SLOTNUM)  
								println("parkManagerService [carenter] | send to client TOOKENID = $TOKENID")
								answer("carenter", "receipt", "receipt($TOKENID)"   )  
								}
								else
								 {if( INFREE == 0 
								  ){println("parkManagerService [carenter] |l'indoor area Ã¨ occupata ")
								 answer("carenter", "receipt", "receipt(8)"   )  
								 forward("trolleycmd", "trolleycmd(moveToHome)" ,"trolley" ) 
								 }
								 else
								  {answer("carenter", "receipt", "receipt(9)"   )  
								  }
								 }
								}
								else
								 {answer("carenter", "receipt", "receipt(0)"   )  
								 forward("trolleycmd", "trolleycmd(moveToHome)" ,"trolley" ) 
								 }
						}
					}
					 transition( edgeName="goto",targetState="working", cond=doswitch() )
				}	 
				state("acceptOut") { //this:State
					action { //it:State
						updateResourceRep("parkmanagerservice(acceptOut)" 
						)
						println("parkManagerService | acceptOut ")
						if( OUTFREE == 1 && !stateTrolley.equals("trolley(stopped)") 
						 ){if( checkMsgContent( Term.createTerm("pickup(TOKENID)"), Term.createTerm("pickup(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								TOKENID= payloadArg(0).toString()  
								println("parkManagerService [acceptOut] | receive TOKENID = $TOKENID")
								 CARSLOTNUM = Slotnum.findSlot(TOKENID)  
								println("parkManagerService [acceptOut]]: receive CARSLOTNUM = $CARSLOTNUM")
								answer("pickup", "ok", "ok($OUTFREE)"   )  
								
													Slotnum.uptadeSlotnum(CARSLOTNUM, true)
													var MOVETOSLOT = "moveToSlot".plus(CARSLOTNUM)
								forward("trolleycmd", "trolleycmd($MOVETOSLOT)" ,"trolley" ) 
								forward("trolleycmd", "trolleycmd(moveToOut)" ,"trolley" ) 
						}
						}
						else
						 {answer("pickup", "ok", "ok($OUTFREE)"   )  
						 println("parkManagerService [acceptOut]: outdoor-area occupied, the request could not be processed")
						 }
					}
					 transition( edgeName="goto",targetState="working", cond=doswitch() )
				}	 
				state("theend") { //this:State
					action { //it:State
						forward("trolleycmd", "trolleycmd(end)" ,"trolley" ) 
					}
				}	 
			}
		}
}
