 System  /*  -trace */ parkingarea           
//mqttBroker "localhost" : 1883 eventTopic "unibo/basicrobot"   		

Dispatch trolleycmd : trolleycmd(MOVETO)
Dispatch cmd       	: cmd(M)     
Dispatch trolleyEnd : end(V)

Dispatch basicEnd       	: end(ARG)   
   
Dispatch moveok	: move( MOVESHORT )
Request step	: step( TIME )	  
Reply   stepdone	: stepdone(V)  
Reply   stepfail	: stepfail(DURATION, CAUSE)
  
Dispatch obstacle  : obstacle( ARG ) 		//generated by distancefilter
Event  endall	   : endall( ARG )    
Event   info       : info( ARG ) 	    	//for external components, not coap-observed
Event  sonar       : sonar(DISTANCE,NAME)	//emitted by distancefilter
 
Request carenter : carenter(C)
Reply receipt : receipt(I)

Request notifyIn : notifyIn(N)  
Reply informIn : informIn(S)

Request pickup : pickup(TOKENID)
Reply ok : ok(O)
 
Context ctxparkingarea ip [host="localhost" port=8021]  

CodedQActor datacleaner    context ctxparkingarea className "rx.dataCleaner"  //NOT used with the virtualrobot
CodedQActor distancefilter context ctxparkingarea className "rx.distanceFilter"

QActor basicrobot context ctxparkingarea{
	[#
	  var StepTime      = 0L 
	  var StartTime     = 0L     
	  var Duration      = 0L  
	  var RobotType     = "" 
	  var CurrentMove   = "moveUnknown"
	#]     
	State s0 initial {     
		println("basicrobot | START")	 
 		//[# sysUtil.trace = true #]		//Equivalent to the -trace flag
 		 
 		[# sysUtil.waitUser("hello", 3000) #]
 		qrun unibo.robot.robotSupport.create(myself,"basicrobotConfig.json")	
 		[# RobotType = unibo.robot.robotSupport.robotKind #]
        if[# RobotType != "virtual" #]{
	 		println("basicrobot | type=$RobotType attempts to activate the sonar pipe")	
	 		[#  //For real robots
				//delay( 1500 ) //give to the realsonar the time to start
	 			var robotsonar = context!!.hasActor("realsonar")  
	 			if( robotsonar != null ){ 
	 				println("basicrobot | WORKING WITH SONARS") 
	 				//ACTIVATE THE DATA SOURCE realsonar
	 				forward("sonarstart", "sonarstart(1)" ,"realsonar" ) 				
	 				//SET THE PIPE  
	 				robotsonar.
	 				subscribeLocalActor("datacleaner").
	 				subscribeLocalActor("distancefilter").
	 				subscribeLocalActor("basicrobot")		//in order to perceive obstacle
	 			}else{
	 				println("basicrobot | WARNING: realsonar NOT FOUND")
	 			}
	 		#]  
 		} 
		else{ //virtual
			[#  var robotsonar = context!!.hasActor("robotsonar") 
	 			if( robotsonar != null ){ 
	 				println("basicrobot | WORKING WITH VIRTUAL SONAR") 
	 				//ACTIVATE THE DATA SOURCE realsonar
	 				forward("sonarstart", "sonarstart(1)" ,"robotsonar" ) 				
	 				//WE DO NOT SET THE PIPE, since we don't have sonar data  to clean
	 				/* 
	 				robotsonar.
	 				subscribeLocalActor("datacleaner").
	 				subscribeLocalActor("distancefilter").
	 				subscribeLocalActor("basicrobot")		*/
	 			}else{
	 				println("basicrobot | WARNING: robotsonar NOT FOUND")
	 			}
 
 			#] 
 		}
 		
	//	updateResource [# "basicrobot(start)" #]
 
		discardMsg Off  //WE want receive any msg 
	} 
	
	Goto work
	 
	State work{  
		println("basicrobot  | waiting .................. ")  
		
	}
	  
	Transition t1   whenMsg    	cmd		-> exec
					whenRequest step	-> doStep			
					whenMsg		obstacle	-> handleObstacle  //in virtualrobot caused by the move w/s
				  	whenMsg    	basicEnd	-> endwork			  
	
	
	
	State exec{
		printCurrentMessage
		onMsg( cmd : cmd(MOVE) ){ 
  			//activate the motors  
			[# CurrentMove =  "${payloadArg(0)}" #] 
			println("CurrentMove =  $CurrentMove")
		 	if [# CurrentMove == "w" #] {
				//delay 1000
				run unibo.robot.robotSupport.move( "w" ) 
				delay 400
				run unibo.robot.robotSupport.move( "h" )
			}else{
				run unibo.robot.robotSupport.move( "${payloadArg(0)}" )
			}
			if [# CurrentMove != "h" #] { updateResource [# "moveactivated($CurrentMove)" #] }
		}
	 }  
	 
	Goto work      
	        
	State handleObstacle{   
	    run unibo.robot.robotSupport.move( "h" )
		println("basicrobot | handleObstacle CurrentMove=$CurrentMove")	
		printCurrentMessage
			//msg(obstacle,dispatch,distancefilter,basicrobot,obstacle(5),18)
		if[# CurrentMove == "w" #]{
 			/*
			 * collision Json      : emitted by the virtualrobot 
			 * obstacle(virtual)   : emitted by the virtualrobotSupport2021 when endmove=false
			 * obstacle(5)         : emitted by the distanceFilter
			 * obstacle(w)         : emitted by the basicrobot
			 */ 
		//updateResource [# "obstacle(w)" #]
			//delay 300
			
		//println("COMPENSATEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE")
		run unibo.robot.robotSupport.move( "s" ) 
		delay 100 //loose the control ...
		run unibo.robot.robotSupport.move( "h" ) 
		
			//delay 1000	//give time
 		 
		} 	
	}
	
	Goto work
	
	State handleSonar{
		printCurrentMessage
	}
	
	Goto work
		
   	State doStep{ 
 		printCurrentMessage  
		onMsg( step : step( T ) ){  
			[#	StepTime = payloadArg(0).toLong() 	#]  
			updateResource [# "step(${StepTime})" #]
  		}  
        memoCurrentTime StartTime  
        println("basicrobot | doStep StepTime =$StepTime ")        
        run unibo.robot.robotSupport.move( "w" )  //moves a real robot forever
        
	}  
	Transition t0 	whenTimeVar StepTime  -> stepDone //stepPerhapsDone	//caused by p
					whenMsg  obstacle     -> stepFail		
        //whenMsg     cmd       -> execcmd
  	 
	State stepDone{   
 		run unibo.robot.robotSupport.move( "h" )  //stop the real robot already done
		println("basicrobot | stepDone")
		updateResource [# "stepDone($StepTime)" #]
   		//emit info : info( stepdone($StepTime) )
   		replyTo step with stepdone : stepdone(ok)
		//println("basicrobot | stepDone reply done")
  	}
	Goto work  
 
	State stepFail{  		
		setDuration Duration from StartTime
		run unibo.robot.robotSupport.move( "h" )  //stop the (real) robot
		[# var TunedDuration = Duration;  
			TunedDuration = Duration * 5 / 6
		#]
		println("basicrobot | stepFail duration=$Duration TunedDuration=$TunedDuration")
			run unibo.robot.robotSupport.move( "s" )
			delayVar TunedDuration 
			run unibo.robot.robotSupport.move( "h" ) 
 		updateResource [# "stepFail($Duration)" #] 
 		//emit info : info( stepFail($Duration) )
 		replyTo step with stepfail : stepfail($Duration, obst)
    }
	Goto work
	
	State endwork{ 
		println("basicrobot | endwork")
		onMsg( basicEnd : end( V ) ){ 
			println("basicrobot | endwork")
			updateResource [# "basicrobot(end)" #]	 		
			//run utils.virtualRobotSupportQak.terminatevr( )
		}
 		emit endall : endall(normal) 
 		terminate 1
	}      
 }
 QActor trolley context ctxparkingarea{
	[#	val mapname     = "parkingMap0"  		  
  		var Myself      = myself    
  		var CurrentPlannedMove = ""   
  		var MOVE = ""
  		var terminate =  0
 		var home = 0 
	 #]   	
	State s0 initial{
		println ("trolley | start")
		
		run itunibo.planner.plannerUtil.initAI()  
		println("&&&  trolley loads the parking map from the given file ...") 
		run itunibo.planner.plannerUtil.loadRoomMap("$mapname")  
		//Set the parking area ...
		run itunibo.planner.plannerUtil.showMap()   
     	run itunibo.planner.plannerUtil.showCurrentRobotState()
     	 
     	//run pathexecutil.register(Myself)   	
		  
	}
	Goto idle
	           
	State idle {
		println("trolley [idle]  | waiting......... ") 
	  
	} 	

	Transition t1  	 whenMsg     trolleycmd  -> working
													
	State working{
		
		[#home = 0#]
		println("trolley | working") 
		
		onMsg( trolleycmd : trolleycmd(MOVE) ){
  
			[# MOVE =  "${payloadArg(0).toString()}" #] 
			println("trolley [working] | Current move = $MOVE")
			
			if [# MOVE == "moveToIn" #] {
				println("trolley [working] | moveToIn ")
				run itunibo.planner.plannerUtil.planForGoal("6","0")
			}
			if [# MOVE == "moveToSlot1" #] {
				println("trolley [working] | moveToSlot1 ")
		 		run itunibo.planner.plannerUtil.planForGoal("4","1")
		 		
			}
			if [# MOVE == "moveToSlot2" #] {
				println("trolley [working] | moveToSlot2 ")
		 		run itunibo.planner.plannerUtil.planForGoal("1","1")
		 		
			}
			if [# MOVE == "moveToSlot3" #] {
				println("trolley [working] | moveToSlot3 ")
		 		run itunibo.planner.plannerUtil.planForGoal("4","2")
			}
			if [# MOVE == "moveToSlot4" #] {
				println("trolley [working] | moveToSlot4 ")
		 		run itunibo.planner.plannerUtil.planForGoal("1","2")
			}
			if [# MOVE == "moveToSlot5" #] {
				println("trolley [working] | moveToSlot5 ")
		 		run itunibo.planner.plannerUtil.planForGoal("4","3")
			}
			if [# MOVE == "moveToSlot6" #] {
				println("trolley [working] | moveToSlot6 ")
		 		run itunibo.planner.plannerUtil.planForGoal("1","3")
			}
			if [# MOVE == "moveToOut" #] {
				println("trolley [working] | moveToOut ")
				run itunibo.planner.plannerUtil.planForGoal("6","4")
			}
			if [#MOVE  == "moveToHome"#]{
				println("trolley [working] | $MOVE ")
				run itunibo.planner.plannerUtil.planForGoal("0","0")
				[# home =  1#]
			}
			if [# MOVE == "end"#]{
				println("trolley [working] | $MOVE ")
				run itunibo.planner.plannerUtil.planForGoal("0","0")
				[# terminate = 1#] 
			}
	}
} 
	
	Goto execPlannedMoves 
		
  	State execPlannedMoves{
  		delay 400
 		[#  CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove() #]
 		println("trolley [execPlannedMoves] | CurrentPlannedMove = $CurrentPlannedMove")
	}
	Goto doMove if [# CurrentPlannedMove.length>0  #] else finishPlannedMoves //working
	
	State doMove{ 	
		
		if [# CurrentPlannedMove == "l"#]{
  			forward basicrobot -m cmd : cmd(l)
  		} 
  		if [#CurrentPlannedMove == "r"  #]{
  			forward basicrobot -m cmd : cmd(r)   
  		}   
  		if [#CurrentPlannedMove == "w"  #]{
  	 		forward basicrobot -m cmd : cmd(w)
  		} 
  		println("trolley | doMove")
  		run itunibo.planner.plannerUtil.updateMap("$CurrentPlannedMove")
  		run itunibo.planner.plannerUtil.showCurrentRobotState( )
 	}
	
	Transition t1   whenTime 100 -> execPlannedMoves
 					whenMsg  trolleycmd  and [#home == 1 && terminate == 0#]-> working
 	
 	State finishPlannedMoves{  
 		println("")
 	}	
	Goto end if [# terminate == 1  #] else idle
	  
	State end{
		println("trolley | end")
		[#	var direction= itunibo.planner.plannerUtil.getDirection()
			
			if(direction == "leftDir"){
				forward("cmd", "cmd(l)" ,"basicrobot" )
				itunibo.planner.plannerUtil.updateMap( "l"  )
			}else{
				forward("cmd", "cmd(l)" ,"basicrobot" )
				itunibo.planner.plannerUtil.updateMap( "l"  ) 
				forward("cmd", "cmd(l)" ,"basicrobot" )
				itunibo.planner.plannerUtil.updateMap( "l"  ) 
			} 
		#]
			
		forward basicrobot -m basicEnd : end(V)   
	}					
}

QActor parkmanagerservice context ctxparkingarea {
	
	[# 	var SLOTNUM = 0
		var CARSLOTNUM = 0 
		var TOKENID = " "
		var INFREE =1
		var OUTFREE = 1
		var stateTrolley =1
	#]
	
	State s0  initial{
		println("parkmanagerservice | start")
	} 
	Goto working 
	
	State working {
		println("parkmanagerservice | working")
	} 
	Transition t0 	whenRequest notifyIn -> acceptIn
					whenRequest pickup -> acceptOut
					whenRequest carenter -> handleCarenter	
	State acceptIn{
		
		println("parkManagerService | acceptIn")
		printCurrentMessage
		onMsg(notifyIn: notifyIn(N)){
			if	[# INFREE ==1 && stateTrolley ==1#]{
					[# SLOTNUM = Slotnum.getSlotnum() #]
					replyTo notifyIn with informIn : informIn($SLOTNUM)
					[#Slotnum.uptadeSlotnum(SLOTNUM, false)#]
			}
			else {
				println("parkManagerService [acceptIn] | indoor-area occupied, the request could not be processed")
			}
		}
	} 
	Transition t0	whenRequest carenter -> handleCarenter
				 	whenRequest pickup -> acceptOut
					whenRequest notifyIn -> acceptIn
	State handleCarenter{
		
		println("parkManagerService | caraenter")
		printCurrentMessage
		onMsg(carenter : carenter(S)){
			[#  INFREE=0 
				SLOTNUM= payloadArg(0).toInt()
			#]
	
			if  [# SLOTNUM!= 0 #]{ 
				println("parkManagerService [carenter] | send to trolley moveToIn")
				forward trolley -m trolleycmd : trolleycmd(moveToIn)
				//TODO check that the trolley has taken the car with the weightsensor
				delay 200
				[#INFREE = 1#]
			
				if[#INFREE == 1#]{
					[# 
						var MOVETOSLOT = "moveToSlot".plus(SLOTNUM)
					#]
					println("parkManagerService [carenter] | send to trolley $MOVETOSLOT")
					forward trolley -m trolleycmd : trolleycmd($MOVETOSLOT)
				
					[# TOKENID=  Slotnum.generateTOKENID(SLOTNUM) #]
				
					println("parkManagerService [carenter] | send to client TOOKENID = $TOKENID")
					replyTo carenter with receipt : receipt($TOKENID)
				}
			}else{
				forward trolley -m trolleycmd : trolleycmd(moveToHome)

			}
		}
	} 
	Goto working 
	
	State acceptOut{
		println("parkManagerService | acceptOut ")
		printCurrentMessage
		if[#OUTFREE == 1 && stateTrolley == 1#]{ 
			onMsg(pickup : pickup(TOKENID)){ 
				
				[#TOKENID= payloadArg(0).toString() #]
				println("parkManagerService [acceptOut] | receive TOKENID = $TOKENID")
				
				[# CARSLOTNUM = Slotnum.findSlot(TOKENID) #]
				println("parkManagerService [acceptOut]]: receive CARSLOTNUM = $CARSLOTNUM")
				replyTo pickup with ok : ok($OUTFREE)
				[#
					Slotnum.uptadeSlotnum(CARSLOTNUM, true)
					var MOVETOSLOT = "moveToSlot".plus(CARSLOTNUM)
				#]
				forward trolley -m trolleycmd : trolleycmd($MOVETOSLOT)
				forward trolley -m trolleycmd :trolleycmd(moveToOut)
			}
		}else{
			replyTo pickup with ok : ok($OUTFREE)
			println("parkManagerService [acceptOut]: outdoor-area occupied, the request could not be processed")
		}
	}
	Goto working
		
}

QActor parkingservicegui context ctxparkingarea {

	[# 	var SLOTNUM = 0  
		//var RequestAccepted = 0
		var TOKENID = ""
		var fileName = "Tokenid.txt"
	    val file = java.io.File(fileName)
	    if(!file.exists()){
			file.createNewFile()
		}
	#]
	State s0 initial {
		println("parkingservicegui |  start")
		
	} 
	Goto requestToEnter
	
	State requestToEnter{
		println("parkingservicegui | requesttoenter ")
		request parkmanagerservice -m notifyIn : notifyIn(A)
	}
	Transition t0 whenReply informIn -> carEnter
	
	State carEnter{
		println("parkingservicegui | carEnter ")  
		delay 5000
		onMsg(informIn : informIn(S)){
		[# var SLOTNUM= payloadArg(0).toInt() #]
		println("parkingservicegui [carEnter] | receive SLOUTNUM = $SLOTNUM ")
		if[#SLOTNUM >0#]{
			delay 1000 //time required for the client to arrive at the parking-area
			println("parkingservicegui [carEnter] | send CARENTER ")
			request parkmanagerservice -m carenter : carenter ($SLOTNUM)
			} 
		}
	}
	Transition t0  whenReply receipt -> saveTOKENID
	
	State saveTOKENID{
		println("parkingservicegui | saveTOKENID")
		onMsg(receipt : receipt(TOKENID)){  
		[#	TOKENID = payloadArg(0).toString()
			file.writeText(TOKENID)  #]
			println("parkingservicegui [saveTOKENID]: receive TOKENID = $TOKENID")	
		}
	}
	Transition t0 whenTime 9000 -> requestPickup     
	//TODO: numbers of client > 0 and occupied outdoor-area 
	State requestPickup{
		println("parkingservicegui | requestPickup")	
		request parkmanagerservice -m pickup : pickup($TOKENID)
		
	} 
	State handlerResponsePickup{
		println("parkingservicegui| handlerResponsePickup")
		onMsg (ok: ok(1)){
			println("parkingservicegui [handlerResponsePickup] | pickup request has been accepted and processed")
			//[#RequestAccepted = 1#]
		}onMsg (ok: ok(0)){
			println("parkingservicegui [handlerResponsePickup] |  wait for the outdoor area to be free")
			}
		
		}
}


/*Test with two client
QActor parkingservicegui1 context ctxparkingarea {

	[# 	var SLOTNUM = 0  
		//var RequestAccepted = 0
		var TOKENID = ""
		var fileName = "Tokenid.txt"
	    val file = java.io.File(fileName)
	    if(!file.exists()){
			file.createNewFile()
		}
	#]
	State s0 initial {
		println("parkingservicegui1  |  start")
		
	} 
	Goto requestToEnter
	
	State requestToEnter{
		println("parkingservicegui1 | requesttoenter ")
		request parkmanagerservice -m notifyIn : notifyIn(A)
	}
	Transition t0 whenReply informIn -> carEnter
	
	State carEnter{
		println("parkingservicegui1 | carEnter ")
		onMsg(informIn : informIn(S)){
		[# var SLOTNUM= payloadArg(0).toInt() #]
		println("parkingservicegui1 [carEnter] | receive SLOUTNUM = $SLOTNUM ")
		if[#SLOTNUM >0#]{
			delay 1000 //time required for the client to arrive at the parking-area
			println("parkingservicegui1 [carEnter] | send CARENTER ")
			request parkmanagerservice -m carenter : carenter ($SLOTNUM)
			} 
		}
	}
	Transition t0  whenReply receipt -> saveTOKENID
	 
	State saveTOKENID{
		println("parkingservicegui1 | saveTOKENID")
		onMsg(receipt : receipt(TOKENID)){
		[#	TOKENID = payloadArg(0).toString()
			file.writeText(TOKENID)  #]
			println("parkingservicegui1 [saveTOKENID]: receive TOKENID = $TOKENID")	
		}
	}
	Transition t0 whenTime 9000 -> requestPickup    
	//TODO: numbers of client > 0 and occupied outdoor-area 
	State requestPickup{
		println("parkingservicegui1 | requestPickup")	
		request parkmanagerservice -m pickup : pickup($TOKENID)
		
	} 
	Transition t0 whenReply ok -> handlerResponsePickup
	
	State handlerResponsePickup{
		println("parkingservicegui1| handlerResponsePickup")
		onMsg (ok: ok(1)){
			println("parkingservicegui1 [handlerResponsePickup] | pickup request has been accepted and processed")
			//[#RequestAccepted = 1#]
		}onMsg (ok: ok(0)){
			println("parkingservicegui1 [handlerResponsePickup] |  wait for the outdoor area to be free")
		}
		
		}//Goto pickup  if [# RequestAccepted == 0#] else s0
}
*/
