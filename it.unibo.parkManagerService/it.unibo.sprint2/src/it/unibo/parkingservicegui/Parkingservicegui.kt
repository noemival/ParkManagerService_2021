/* Generated by AN DISI Unibo */ 
package it.unibo.parkingservicegui

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Parkingservicegui ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 	var SLOTNUM = 0  
				//var RequestAccepted = 0
				var TOKENID = ""
				var fileName = "Tokenid.txt"
			    val file = java.io.File(fileName)
			    if(!file.exists()){
					file.createNewFile()
				}
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("parkingservicegui |  start")
					}
					 transition( edgeName="goto",targetState="requestToEnter", cond=doswitch() )
				}	 
				state("requestToEnter") { //this:State
					action { //it:State
						println("parkingservicegui | requesttoenter ")
						request("notifyIn", "notifyIn(A)" ,"parkmanagerservice" )  
					}
					 transition(edgeName="t015",targetState="carEnter",cond=whenReply("informIn"))
				}	 
				state("carEnter") { //this:State
					action { //it:State
						println("parkingservicegui | carEnter ")
						delay(5000) 
						if( checkMsgContent( Term.createTerm("informIn(S)"), Term.createTerm("informIn(S)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var SLOTNUM= payloadArg(0).toInt()  
								println("parkingservicegui [carEnter] | receive SLOUTNUM = $SLOTNUM ")
								if( SLOTNUM >0 
								 ){delay(1000) 
								println("parkingservicegui [carEnter] | send CARENTER ")
								request("carenter", "carenter($SLOTNUM)" ,"parkmanagerservice" )  
								}
						}
					}
					 transition(edgeName="t016",targetState="saveTOKENID",cond=whenReply("receipt"))
				}	 
				state("saveTOKENID") { //this:State
					action { //it:State
						println("parkingservicegui | saveTOKENID")
						if( checkMsgContent( Term.createTerm("receipt(I)"), Term.createTerm("receipt(TOKENID)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
									TOKENID = payloadArg(0).toString()
											file.writeText(TOKENID)   
								println("parkingservicegui [saveTOKENID]: receive TOKENID = $TOKENID")
						}
						stateTimer = TimerActor("timer_saveTOKENID", 
							scope, context!!, "local_tout_parkingservicegui_saveTOKENID", 9000.toLong() )
					}
					 transition(edgeName="t017",targetState="requestPickup",cond=whenTimeout("local_tout_parkingservicegui_saveTOKENID"))   
				}	 
				state("requestPickup") { //this:State
					action { //it:State
						println("parkingservicegui | requestPickup")
						request("pickup", "pickup($TOKENID)" ,"parkmanagerservice" )  
					}
				}	 
				state("handlerResponsePickup") { //this:State
					action { //it:State
						println("parkingservicegui| handlerResponsePickup")
						if( checkMsgContent( Term.createTerm("ok(O)"), Term.createTerm("ok(1)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("parkingservicegui [handlerResponsePickup] | pickup request has been accepted and processed")
						}
						if( checkMsgContent( Term.createTerm("ok(O)"), Term.createTerm("ok(0)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("parkingservicegui [handlerResponsePickup] |  wait for the outdoor area to be free")
						}
					}
				}	 
			}
		}
}
