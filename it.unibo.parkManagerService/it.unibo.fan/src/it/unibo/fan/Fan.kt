/* Generated by AN DISI Unibo */ 
package it.unibo.fan

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Fan ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var gui : FanGui = FanGui()
				var stateFan = "start"
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = true
						println("fan | start")
						gui.initialiaze()
								 utility.HandleData().initialize()
								 
					}
					 transition( edgeName="goto",targetState="handleState", cond=doswitch() )
				}	 
				state("handleState") { //this:State
					action { //it:State
						stateFan = utility.HandleData().getState("fanmanager")
							 	gui.setState(stateFan) 
						stateTimer = TimerActor("timer_handleState", 
							scope, context!!, "local_tout_fan_handleState", 2000.toLong() )
					}
					 transition(edgeName="t00",targetState="handleState",cond=whenTimeout("local_tout_fan_handleState"))   
				}	 
			}
		}
}
