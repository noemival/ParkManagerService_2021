/* Generated by AN DISI Unibo */ 
package it.unibo.weightsensor

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Weightsensor ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var gui : WeightSensorGui = WeightSensorGui()
				var carNotDetected = true 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = true
						println("weightsensor | start")
						gui.initialiaze() 
					}
					 transition( edgeName="goto",targetState="working", cond=doswitch() )
				}	 
				state("working") { //this:State
					action { //it:State
						println("weihtSensor :  working")
						var Weight = gui.value  
						println(Weight)
						if(Weight == 0 && carNotDetected == false){
							 		carNotDetected = true
							 		emit("weight", "weight($Weight)")
							 	}else if(carNotDetected ==  true && Weight != 0){
							 		carNotDetected =  false 
							 		emit("weight", "weight($Weight)")
							 	} 
						stateTimer = TimerActor("timer_working", 
							scope, context!!, "local_tout_weightsensor_working", 2000.toLong() )
					}
					 transition(edgeName="t00",targetState="working",cond=whenTimeout("local_tout_weightsensor_working"))   
				}	 
			}
		}
}
