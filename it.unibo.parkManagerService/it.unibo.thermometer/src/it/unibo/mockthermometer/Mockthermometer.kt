/* Generated by AN DISI Unibo */ 
package it.unibo.mockthermometer

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Mockthermometer ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
				var V=0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("mocktehermometer | start")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						
									
									
								 V= kotlin.random.Random.nextInt(0, 50)
									 
						emit("temp", "temp($V)" ) 
						println("mockthermometer | temp : $V ")
						stateTimer = TimerActor("timer_work", 
							scope, context!!, "local_tout_mockthermometer_work", 10000.toLong() )
					}
					 transition(edgeName="t01",targetState="work",cond=whenTimeout("local_tout_mockthermometer_work"))   
				}	 
			}
		}
}
