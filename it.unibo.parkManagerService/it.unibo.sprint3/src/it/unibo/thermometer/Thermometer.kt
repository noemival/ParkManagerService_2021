/* Generated by AN DISI Unibo */ 
package it.unibo.thermometer

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Thermometer ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var T= "" 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("thermometer | starting ")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("thermometer | work")
					}
					 transition(edgeName="t031",targetState="handleMsg",cond=whenDispatch("temp"))
				}	 
				state("handleMsg") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("temp(V)"), Term.createTerm("temp(T)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 T= payloadArg(0) 
								emit("temperature", "temperature($T)" ) 
								println("$name in ${currentState.stateName} | $currentMsg")
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
