/* Generated by AN DISI Unibo */ 
package it.unibo.outsonar

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Outsonar ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = true
						println("outsonar | start")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						println("outsonar | work")
					}
					 transition(edgeName="t00",targetState="handlemsg",cond=whenDispatch("sonar"))
				}	 
				state("handlemsg") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
									
									var DIST=0
						println("outsonar | handlemsg")
						if( checkMsgContent( Term.createTerm("sonar(G)"), Term.createTerm("sonar(O)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 DIST = payloadArg(0).toInt()  
								if( DIST<20  
								 ){emit("outsonar", "outsonar(O)" ) 
								}
								else
								 {emit("takecar", "takecar(P)" ) 
								 }
						}
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
			}
		}
}
