/* Generated by AN DISI Unibo */ 
package it.unibo.outdoormanager

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Outdoormanager ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		var Ciccio = 4000L 
				var Ciccio2= 100L
				var start =  0L
				var differenza = 0L
				var pippo = false
			
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("outmanager || start")
					}
					 transition( edgeName="goto",targetState="working", cond=doswitch() )
				}	 
				state("working") { //this:State
					action { //it:State
					}
					 transition(edgeName="t016",targetState="start",cond=whenEvent("outsonar"))
				}	 
				state("start") { //this:State
					action { //it:State
						 
									start = System.currentTimeMillis()	
						println("stateTimer | ciao ) ")
					}
					 transition( edgeName="goto",targetState="handlemsg", cond=doswitch() )
				}	 
				state("handlemsg") { //this:State
					action { //it:State
						differenza = System.currentTimeMillis() - start 
						println("stateTimer |  Differenza $differenza")
						if( differenza >= 1000L 
						 ){println("stateTimer | EVENTO ALLARME Differenza $differenza")
						}
						else
						 {forward("outmanager", "outmanager(occ)" ,"parkmanagerservice" ) 
						 println("stateTimer | NON EVENTO ALLARME  ")
						 }
						stateTimer = TimerActor("timer_handlemsg", 
							scope, context!!, "local_tout_outdoormanager_handlemsg", 300.toLong() )
					}
					 transition(edgeName="t017",targetState="handlemsg",cond=whenTimeout("local_tout_outdoormanager_handlemsg"))   
					transition(edgeName="t018",targetState="free",cond=whenDispatch("takecar"))
				}	 
				state("free") { //this:State
					action { //it:State
						forward("outsonarocc", "outsonarocc(free)" ,"parkmanagerservice" ) 
						println("AREA LIBERAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
					}
				}	 
			}
		}
}
