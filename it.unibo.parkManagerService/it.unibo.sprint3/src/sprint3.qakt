 System  /*  -trace */ parkingarea           
//mqttBroker "localhost" : 1883 eventTopic "unibo/basicrobot"   		
Event outsonar : outsonar (O)
Dispatch outsonarocc : outsonarocc(G)
Dispatch outfree : outfree(free)
Event alarm : alarm(W)

Event weightsensor : weightsensor(W)
Dispatch weight : weight (W)

Dispatch trolleycmd : trolleycmd(MOVETO)
Dispatch cmd       	: cmd(M)     
Dispatch trolleyEnd : end(V)   
Dispatch position : pos(P)   

Request carenter : carenter(C)
Reply receipt : receipt(I)  


Request notifyIn : notifyIn(N)  
Reply informIn : informIn(S)

Request pickup : pickup(TOKENID)
Reply ok : ok(O)

Dispatch end : end(e)

Dispatch takecar : takecar(P)   
 


Context ctxparkingarea ip [host="localhost" port=8021]  

CodedQActor datacleaner    context ctxparkingarea className "rx.dataCleaner"  //NOT used with the virtualrobot
CodedQActor distancefilter context ctxparkingarea className "rx.distanceFilter"


QActor outsonar context ctxparkingarea{
	
 	State s0 initial {
		println("outsonar | start")
	
	} Goto work
	
	State work{
			
	}Transition t0 whenMsg outsonarocc ->handlemsg
	
	State handlemsg{
		
		emit outsonar : outsonar (O)
		
		
		}Transition t0 whenTime 100 -> handlemsg
					   whenMsg 	takecar ->work 
		
}
QActor weightsensor context ctxparkingarea{
	
	State s0 initial {
		
			println("weightsensor | start")
			
	} Goto work
	
	State work{
		
		[#
			var WEIGHT=0//eragisco con utente per simulare il valore W del peso
			
		#]
		println("weightsensor | working")
		onMsg( weight : weight(W) ){
			[# WEIGHT = payloadArg(0).toInt() #] 
			println ("weightsensor [working] | weight car: $WEIGHT")
			emit weightsensor : weightsensor ($WEIGHT)
			println("weightsensor [working] | emit event")
			delay 3000
		} 

		
		
	}Transition t0 whenMsg weight ->work	
}
	
QActor parkmanagerservice context ctxparkingarea {
	
	[# 	var SLOTNUM = 0
		var CARSLOTNUM = 0 
		var TOKENID = " "
		var INFREE = 1
		var OUTFREE = 1
		var stateTrolley =1
	#]
	
	State s0  initial{
		
		println("parkmanagerservice | start")
	} Goto working 
	
	State working {
		
		println("parkmanagerservice  | working")
		println("parkmanagerservice [working] | OUTFREE =  $OUTFREE")
		
	}Transition t0 	whenRequest notifyIn -> acceptIn
					whenRequest pickup -> acceptOut
					whenRequest carenter -> carenter
					whenEvent 	weightsensor -> handlemsgIn
					whenMsg 	outfree -> handlemsgOut
					whenMsg  	end -> theend	
					whenEvent   alarm-> handlealarm
					
	State handlealarm{
		
		updateResource[#"alarm(a)"#]
		println ("parkManagerService [handlealarm] | alarm")
		
	}Goto working

	State handlemsgIn{
		onMsg(weightsensor: weightsensor(W)){
		[# var W = payloadArg(0).toInt() #] 
			
				if[#W>0#]{
					[#INFREE = 0 #]
					println("parkManagerService [handlemsgIn] | INDOOR occupied")
		
				}else {[#INFREE = 1#]
					println("parkManagerService [handlemsgIn] | INDOOR free")
				}
		}
	}Goto working
	
	State handlemsgOut{

		onMsg(outfree: outfree(W)){
			[# var O = payloadArg(0) #] 
			
				if[#O.equals("occ")#]{
				[#OUTFREE = 0 #]
				println("parkManagerService [handlemsgOut] | OUTDOOR occupied")
				}
				if[#O.equals("free")#] {[#OUTFREE = 1#]
				println("parkManagerService [handlemsgOut] | OUTDOOR free")
				}
		}
	
	}Goto working
			
	State acceptIn{
		println("parkManagerService | acceptIn")
		onMsg(notifyIn: notifyIn(N)){
				if	[# INFREE ==1 && stateTrolley ==1#]{
					[# SLOTNUM = Slotnum.getSlotnum() #]
					replyTo notifyIn with informIn : informIn($SLOTNUM)
					[#Slotnum.uptadeSlotnum(SLOTNUM, false)#]
				}else {
					println("parkManagerService [acceptIn] | indoor-area occupied, the request could not be processed")
				}
		}
	}Transition t0	whenRequest carenter -> carenter
				 	whenRequest pickup -> acceptOut
					whenRequest notifyIn -> acceptIn
					whenEvent 	weightsensor -> handlemsgIn
					whenMsg 	outfree -> handlemsgOut
					whenMsg  	end -> theend	
					whenEvent   alarm-> handlealarm
					
					
	

	State carenter{
		println("parkManagerService | caraenter")
		onMsg(carenter : carenter(S)){
			
			[# SLOTNUM= payloadArg(0).toInt() #]
			
			if  [# SLOTNUM!= 0 && INFREE == 1#]{ 
				
				forward trolley -m trolleycmd : trolleycmd(moveToIn)
				[# var MOVETOSLOT = "moveToSlot".plus(SLOTNUM) #]
				println("parkManagerService [carenter] | send to trolley $MOVETOSLOT")
				forward trolley -m trolleycmd : trolleycmd($MOVETOSLOT)
				[# TOKENID=  Slotnum.generateTOKENID(SLOTNUM) #]
				println("parkManagerService [carenter] | send to client TOOKENID = $TOKENID")
				replyTo carenter with receipt : receipt($TOKENID)
				
			}else {
				
				println("parkManagerService [carenter] | send to trolley moveToHome")
				forward trolley -m trolleycmd : trolleycmd(moveToHome)
				replyTo carenter with receipt : receipt(no)//mando informazione al client
				[#Slotnum.uptadeSlotnum(SLOTNUM, true)#]
			}
			
		}
		
	}Goto working
	   
	State acceptOut{
		
		println("parkManagerService | acceptOut ")
		println("parkManagerService [acceptOut] | OUTFREE $OUTFREE")
		onMsg(pickup : pickup(TOKENID)){ 
		
			if[#OUTFREE == 1 &&   stateTrolley == 1#]{ //
				
				[#TOKENID= payloadArg(0).toString() #]
				println("parkManagerService [acceptOut] | receive TOKENID = $TOKENID")
				[# CARSLOTNUM = Slotnum.findSlot(TOKENID) #]
				println("parkManagerService [acceptOut] | receive CARSLOTNUM = $CARSLOTNUM")
				replyTo pickup with ok : ok(1)
				println("parkManagerService [acceptOut] | receive OUTFREE = $OUTFREE")
				[# Slotnum.uptadeSlotnum(CARSLOTNUM, true)
				var MOVETOSLOT = "moveToSlot".plus(CARSLOTNUM) #]
				forward trolley -m trolleycmd : trolleycmd($MOVETOSLOT)
				forward trolley -m trolleycmd :trolleycmd(moveToOut)
				delay 600
				
			}else{
			replyTo pickup with ok : ok(0)
			println("parkManagerService [acceptOut] | outdoor-area occupied, the request could not be processed")
			}
		
		}
		
	}Goto working
		
	State theend{
		
		forward trolley -m trolleycmd : trolleycmd(end)

	}
}
QActor outmanager context ctxparkingarea{
	[#	var start =  0L
		var difference = 0L
	
	#]
	State s0 initial{
		
		println ("outmanager | start")
		
	} Transition t0 whenEvent 	outsonar -> start
	
	State start{
		
		[# start = System.currentTimeMillis()#]
		println("outmanager [start] | start Timer ) ")
		 
	}Goto work
		
	State work{
		
		[#difference = System.currentTimeMillis() - start#]
		println("outmanager [work] |  difference = $difference")
			
			if[#difference >= 1000L#]{
				println("outmanager [work]  | alarm event, time passed = $difference")
				emit alarm :alarm(a)
			}else {
				forward parkmanagerservice -m outfree : outfree(occ)
				println("outmanager [work]  | no alarm event ")
			} 

	} Transition t0 whenTime 300 ->work
					whenMsg takecar-> free
				
	State free {
		forward parkmanagerservice -m outfree : outfree(free)
		println("outmanager[free] | OUTDOORAREA FREE")
	}
}

QActor trolley context ctxparkingarea{
	[#	val mapname     = "parkingMap0"  		  
  		var Myself      = myself    
  		var CurrentPlannedMove = ""   
  		var MOVE = ""
  		var terminate =  0
 		var home = 0 
	 #]   	
	 
	State s0 initial{
		println ("trolley | start")
		run itunibo.planner.plannerUtil.initAI()  
		println("&&&  trolley loads the parking map from the given file ...") 
		run itunibo.planner.plannerUtil.loadRoomMap("$mapname")  
		//Set the parking area ...
		run itunibo.planner.plannerUtil.showMap()   
     	run itunibo.planner.plannerUtil.showCurrentRobotState()
     	 
		  
	}Goto idle
	           
	State idle {
		
		println("trolley [idle]  | waiting......... ") 
	  
	} Transition t1  	 whenMsg     trolleycmd  -> working
													
	State working{
		
		[#home = 0#]
		println("trolley | working") 
		onMsg( trolleycmd : trolleycmd(MOVE) ){
  
			[# MOVE =  "${payloadArg(0).toString()}" #] 
			println("trolley [working] | Current move: $MOVE")
			
			if [# MOVE == "moveToIn" #] {
				println("trolley [working] | moveToIn ")
				run itunibo.planner.plannerUtil.planForGoal("6","0")
			}
			if [# MOVE == "moveToSlot1" #] {
				println("trolley [working] | moveToSlot1 ")
		 		run itunibo.planner.plannerUtil.planForGoal("4","1")
		 		
			}
			if [# MOVE == "moveToSlot2" #] {
				println("trolley [working] | moveToSlot2 ")
		 		run itunibo.planner.plannerUtil.planForGoal("1","1")
		 		
			}
			if [# MOVE == "moveToSlot3" #] {
				println("trolley [working] | moveToSlot3 ")
		 		run itunibo.planner.plannerUtil.planForGoal("4","2")
			}
			if [# MOVE == "moveToSlot4" #] {
				println("trolley [working] | moveToSlot4 ")
		 		run itunibo.planner.plannerUtil.planForGoal("1","2")
			}
			if [# MOVE == "moveToSlot5" #] {
				println("trolley [working] | moveToSlot5 ")
		 		run itunibo.planner.plannerUtil.planForGoal("4","3")
			}
			if [# MOVE == "moveToSlot6" #] {
				println("trolley [working] | moveToSlot6 ")
		 		run itunibo.planner.plannerUtil.planForGoal("1","3")
			}
			if [# MOVE == "moveToOut" #] {
				println("trolley [working] | moveToOut ")
				run itunibo.planner.plannerUtil.planForGoal("6","4")
			}
			if [#MOVE  == "moveToHome"#]{
				println("trolley [working] | $MOVE ")
				run itunibo.planner.plannerUtil.planForGoal("0","0")
				[# home =  1#]
			}
			if [# MOVE == "end"#]{
				println("trolley [working] | $MOVE ")
				run itunibo.planner.plannerUtil.planForGoal("0","0")
				[# terminate = 1#] 
			}
		}
	}Goto execPlannedMoves 
		
  	State execPlannedMoves{
  		delay 400
 		[#  CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove() #]
 		println("trolley [execPlannedMoves] | execPlannedMoves = $CurrentPlannedMove")
	} Goto doMove if [# CurrentPlannedMove.length>0  #] else finishPlannedMoves //working
	
	State doMove{ 	
		
		if [# CurrentPlannedMove == "l"#]{
  		//forward basicrobot -m cmd : cmd(l)
  			
  			
  		} 
  		if [#CurrentPlannedMove == "r"  #]{
  		//forward basicrobot -m cmd : cmd(r)
  			
  			
  	 
  		}   
  		if [#CurrentPlannedMove == "w"  #]{
  		//forward basicrobot -m cmd : cmd(w)
  		
  		} 
  		println("trolley | doMove")
  		run itunibo.planner.plannerUtil.updateMap("$CurrentPlannedMove")
  		run itunibo.planner.plannerUtil.showCurrentRobotState( )
  		
 	} Transition t1   whenTime 100 -> execPlannedMoves
 					whenMsg  trolleycmd  and [#home == 1 && terminate == 0#]-> working
 	
 	State finishPlannedMoves{
 
 		[# var pos = itunibo.planner.plannerUtil.get_curPos().toString() #]
 		 println("trolley [finishPlannedMoves] | pos = $pos")
 		 		
			if[#pos.equals("(6, 0)")#]{//update resources? 
					forward weightsensor -m weight : weight(0)
				}
				if[#pos.equals("(6, 4)")#]{
					forward outsonar -m outsonarocc : outsonarocc(0)
					forward parkingservicegui -m outsonarocc : outsonarocc(0)
				}
 		
 		println("trolley [finishPlannedMoves] | finish")
 
 	}Goto end if [# terminate == 1  #] else idle
	  
	State end{
		println("trolley | end")
		[#	var direction= itunibo.planner.plannerUtil.getDirection()
			
			if(direction == "leftDir"){
				forward("cmd", "cmd(l)" ,"basicrobot" )
				itunibo.planner.plannerUtil.updateMap( "l"  )
			}else{
				forward("cmd", "cmd(l)" ,"basicrobot" )
				itunibo.planner.plannerUtil.updateMap( "l"  ) 
				forward("cmd", "cmd(l)" ,"basicrobot" )   
				itunibo.planner.plannerUtil.updateMap( "l"  ) 
			} 
		#]  
			
		//forward basicrobot -m basicEnd : end(V)    
	}					
}
QActor parkingservicegui context ctxparkingarea {

	[# 	var SLOTNUM = 0  
		var RequestAccepted = 1
		var TOKENID = ""
		var fileName = "Tokenid.txt"
	    val file = java.io.File(fileName)
	    if(!file.exists()){
			file.createNewFile()
		}
	#]
	State s0 initial {
		
		println("parkingservicegui |  start")
		
	} Goto requestToEnter
	
	State requestToEnter{
		
		println("parkingservicegui | requesttoenter ")
		request parkmanagerservice -m notifyIn : notifyIn(A)
		
	}Transition t0 whenReply informIn -> carEnter
	
	State carEnter{
		
		println("parkingservicegUI | carEnter ")  
		delay 5000
		onMsg(informIn : informIn(S)){
		[# var SLOTNUM= payloadArg(0).toInt() #]
		println("parkingservicegui [carEnter] | receive SLOUTNUM = $SLOTNUM ")
		
		if[#SLOTNUM >0#]{
			
			delay 1000 //time required for the client to arrive at the parking-area
			println("parkingservicegui [carEnter] | send CARENTER ")
			request parkmanagerservice -m carenter : carenter ($SLOTNUM)
			forward weightsensor -m weight : weight (10000)
			} 
		}
	}Transition t0  whenReply receipt -> saveTOKENID
	
	
	State saveTOKENID{
		
		println("parkingservicegui | saveTOKENID")
		onMsg(receipt : receipt(TOKENID)){
		[#	TOKENID = payloadArg(0).toString()
		#] 
		if[#!TOKENID.equals("no")#]	{
			[#file.writeText(TOKENID)  #]
			println("parkingservicegui [saveTOKENID] | receive TOKENID = $TOKENID")	
			}else{
				 println("parkingservicegui [saveTOKENID] | come back later") 
				
				}
			}	
	
	}Goto requestToEnter if[#TOKENID.equals("no")#] else wait


	State wait {
		
	println("parkingservicegui | waiting")
	
	} Transition t0 whenTime 9000 -> requestPickup
	
	State requestPickup{
	
		println("parkingservicegui | requestPickup")	
		request parkmanagerservice -m pickup : pickup($TOKENID)
	
	} Transition t0 whenReply ok-> handlerResponsePickup
	
	State handlerResponsePickup{
		
		println("parkingservicegui| handlerResponsePickup")
		onMsg (ok: ok(O)){
		[#var  ok = payloadArg(0).toInt()#]
			
			if[#ok == 1#]{
				println("parkingservicegui [handlerResponsePickup] | pickup request has been accepted and processed $ok")
				[#RequestAccepted = 1#]
				forward outmanager -m takecar : takecar(P)
				forward outsonar -m takecar : takecar(P)
			}else{
			
			[#RequestAccepted =0#]
			println("parkingservicegui [handlerResponsePickup] |  wait for the outdoor area to be free")
			delay 4000
			}
		}
		
	}Goto requestPickup  if [# RequestAccepted == 0#] else end
		
	State end{
		
			forward parkmanagerservice -m end : end(e)
	}
}