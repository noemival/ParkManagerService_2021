/* Generated by AN DISI Unibo */ 
package it.unibo.outmanager

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Outmanager ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
			var start =  0L
				var differenza = 0L
			
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("outmanager | start")
						stateTimer = TimerActor("timer_s0", 
							scope, context!!, "local_tout_outmanager_s0", 3000.toLong() )
					}
					 transition(edgeName="t00",targetState="start",cond=whenTimeout("local_tout_outmanager_s0"))   
				}	 
				state("start") { //this:State
					action { //it:State
						 start = System.currentTimeMillis() 
						println("outmanager [start] | start Timer ) ")
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("work") { //this:State
					action { //it:State
						emit("alarm", "alarm(a)" ) 
						stateTimer = TimerActor("timer_work", 
							scope, context!!, "local_tout_outmanager_work", 400.toLong() )
					}
					 transition(edgeName="t01",targetState="free",cond=whenTimeout("local_tout_outmanager_work"))   
				}	 
				state("free") { //this:State
					action { //it:State
						forward("outfree", "outfree(free)" ,"parkingmanager" ) 
						println("outmanager[free] | OUTDOORAREA FREE")
					}
				}	 
			}
		}
}
