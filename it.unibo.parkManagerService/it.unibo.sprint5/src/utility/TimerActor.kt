package utility

import it.unibo.kactor.MsgUtil
import kotlinx.coroutines.delay
import it.unibo.kactor.ActorBasic
import it.unibo.kactor.ApplMessage
import alice.tuprolog.Term
import alice.tuprolog.Struct

class TimerActor (name : String ) : ActorBasic( name ) {
val LimitDistance       = 10
var obstacleFound       = false	
var curSonarDistance	= 0
	var differenza = 0L
	var start = 0L
	
	init{
		start = System.currentTimeMillis()
		println("Timer STARTS  ")
	}
@kotlinx.coroutines.ObsoleteCoroutinesApi
@kotlinx.coroutines.ExperimentalCoroutinesApi
    override suspend fun actorBody(msg: ApplMessage) {     //msg( MSGID, MSGTYPE, SENDER, RECEIVER, CONTENT, SEQNUM )
		//println("$tt $name |  $msg")
		//The event 'obstacle' is generated by the virtual robot
	
	
		if( msg.msgId() == "outmanager" ) {
			//countOut( )
				
		}else{
			if( msg.msgId() == "fan"  ) {  //AVOID to handle other events
			///countFan( )
		}
	
 	}
suspend	fun countOut(){
		differenza = System.currentTimeMillis() - start
		println("outmanager |  Differenza $differenza")
			
			if(differenza >= 1000L){
				println("outmanager | EVENTO ALLARME Differenza $differenza")
				//val m0 = MsgUtil.buildEvent(name, "sonar", "sonar($Distance)")
		 	 	//emit( m0 )		
			}else {
				//forward parkingmanager -m outfree : outfree(occ)
				println("outmanager | NON EVENTO ALLARME  ")
			} 
	}
//suspend	fun countFan
	
}
}