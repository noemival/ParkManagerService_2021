System manager 
/*Sequenza operazione:
1)Il termometro invia la temperatura al parkmanager
2)Il parkmanagerservice in base al valore ricevuto attiva o disattiva il fan
* 
* Assunzioni:
1)no allarm simulation;
2)no comunication with ParkManagerService and transport trolley;
3)initially temperature under TMAX 
*/

Dispatch fanstart: fanstart(V)
Dispatch fanstop : fanstop(V)

Event temperature : temperature (T)
Context ctxpm ip [host= "localhost" port=8050]

QActor fan context ctxpm{
	State s0 initial {println("fan in s0")
	}
	Transition t0 whenMsg fanstart->fanwork
				whenMsg fanstop->s0
	
	State fanwork {
		println("fan: abbassando la temperatura")
		//updateResource [#"fan working: lowering the temp"#] 
	}
	Transition t0 whenMsg fanstop->fanstop
				 whenMsg fanstart->fanwork  

	State fanstop {
		println ("fan: stoppato")
	//updateResource [#"fan stopped"#]
		
	}
		Transition t0 whenMsg fanstart->fanwork
						whenMsg fanstop->fanstop
	
	}
	
QActor thermometer context ctxpm{
		State s0 initial {println("thermometer in s0")
	}  Goto work
	
	State work{
		[#
			val TMAX=35
			var T=30 //interagisco con utente per simulare il valore T della temperature#
		]
				println ("$T")
		
	
		emit temperature : temperature (40)
		delay 1000
		emit temperature : temperature (30)
		
	} 
	}

QActor parkingmanager context ctxpm {
			State s0 initial {
				println("parkingManager in s0")
	} Transition t0 whenEvent temperature-> handleTemp
	State handleTemp
	{
		onMsg(temperature :temperature(T)){
			
		[# var temp= payloadArg(0).toInt()#]
		if[# temp > 35#]
		{
			println("ParkingManager: temp > 35, invio il comando di accensione al fan ")
			forward fan -m fanstart: fanstart(on)
			
		}else {
			println("ParkingManager: temp < 30, invio il comando di stop al fan")
			forward fan -m fanstop: fanstop(off)
		}
		}
	}Goto s0
	
	}
